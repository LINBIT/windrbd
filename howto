Note: These are my internal howto receipes, some of them might
be obsolete while others just work in my setting. If you need
help installing windrbd, please see the file INSTALL or contact
sales@linbit.com for professional support.

						- Johannes
---------------------------------------------------------------------

Building and "insmod" DRBD windows driver:

        1.) Run
                make
        on the Linux box (from $HOME/Linbit/Work/wdrbd9)

        2.) Run
                make
        on the Windows box (from $HOME/Linbit/Work/wdrbd9 (takes some while)

        3.) Run
                make install
        on the Windows box (from $HOME/Linbit/Work/wdrbd9/converted-sources/drbd)

        4.) Run (in an Administrator cmd.exe Console: to open it go to
                 C:\Windows\System32 in Explorer, Cmd-Click on cmd.exe
                 and select Run as Administrator)
                INSTALL-DRBD-admin.bat

        5.) To load the driver, do (from Adminstrator Console)
                sc start drbd
        DbgViewer will show output. To start DbgViewer go to
        C:\drbd\DebugViewer and start DbgView.exe as Administrator

from Windows to Mac:

Start -> In Text field:
\\192.168.56.1

Right click: Cmd+Click

Gruppenrichtline: Start, type Gruppenrichtlinie

search cmd.exe - right click (Cmd+click) and select run as administrator

then 
pnputil -a drbd.inf

eventvwr linbit-wdrbd

DebugView

	C:\drbd\dbgview\DbgView.exe as Administrator

---
List physical (also non partitioned) drives:

wmic diskdrive list 
wmic diskdrive list brief

---
Reconnect z: (/home/johannes/Linbit on Ubuntu 14.03 machine):

net use z:

---

partition manager:

System und Sicherheit / Verwaltung / Festplattenpartitionen erstellen und formatieren

---

BSOD:

codes at https://www.lifewire.com/blue-screen-error-codes-4065576
1 Memory referenced
2 IRQL at time of reference
3 0: Read 1: Write 8: Execute
4 Address that referenced memory

----
Disable checksum offloading:

sudo ethtool -K eth1 rx off
sudo ethtool -K eth1 tx off

----

Resolve split brain:

sudo drbdadm connect --discard-my-data w0

jt/fix-multipage-io

Linux invalidate read cache (sync does push write cache)
sudo blockdev --flushbufs /dev/drbd26
sudo blockdev --flushbufs /dev/sdb1

Windows self extracting EXE generator:

iexpress.exe

device          minor 5 name "C:\\foo\\bar";
device          minor 5 name "H:";

drbd_sender.c:make_resync_request()

----

Make versioninfo work:

change path specs in .git file (not dir) in submodules to
relative path.

----

Sign with Linbit certificate (now integrated in Makefile, ignore this
section):

copy unsigned drbd.sys and drbd.cat to Windows 10: C:\to-sign

"C:\Program Files (x86)\Windows Kits\10\bin\10.0.16299.0\x64\signtool.exe" sign /v /ac "C:\cert\DigiCert High Assurance EV Root CA.crt" /a /t http://timestamp.digicert.com "c:\to-sign\drbd.cat"

"C:\Program Files (x86)\Windows Kits\10\bin\10.0.16299.0\x64\signtool.exe" sign /v /ac "C:\cert\DigiCert High Assurance EV Root CA.crt" /a /t http://timestamp.digicert.com "c:\to-sign\drbd.sys"

copy files back to $LINBIT_COMPILE_DIR/signed

Use windrbd-install-signed.SED.in to build package (will take drbd.sys and
	drbd.cat from signed directory).

-----

Make releases
-------------
Update: can now be built with Windows 10 physical machine, which
makes everything much more easy.

Run cygwin update
Update cygwin1.dll to newest version (in inno-setup/cygwin-binaries)

Add entry to README.md
git add README.md
git commit -m "Release 0.x.0 (Beta y)"
git tag windrbd-0.x.0-betay
git describe --tags --always --dirty
	(should not display version as -dirty)

On Windows 10 physical machine (with USB dongle attached):
# Make sure latest drbd-utils are installed (these are used for packaging)
build drbd-utils-windows (make package take drbdadm, ... from build dir)
mount ewdk (double click EWDK_rs5_... ISO on Desktop)
# make BUILD_ENV=jt-win10 R=1 package
# make clean: rebuild so that DEBUG is always unset (disables debug output).
# also that version number gets right
make clean && make package R=1

# test install on Windows VM which has no test mode set (must come up after reboot)
# pass resulting install-windrbd-0.x.0-betay-signed.exe to clients
upload to google drive windrbd-in folder

git push --all
git push --tags

phil:
git push master github
git push master github --tags
copy signed exe to website

johannes:
EMail to drbd-user@lists.linbit.com

-----

Upgrade DRBD

cd drbd
git checkout master
git pull
git submodule update
cd ..
git commit -a

and adapt patches to new version.

----

Partitionieren:

Windows+R:
diskmgmt.msc

----
Delete NTFS partition

dd if=/dev/zero of=/dev/sdXY bs=512 count=1
/dev/sd muss stimmen!! Achtung bei alten windows versionen aendert sich
das zwischen reboots.

-----
Disconnect network share:

net use y: /delete
-----
build and view tech guide:

make tech-guides-pdf-finalize && evince tech-guides/output-pdf/windrbd.pdf 

----

View Generic Script Failover Clustering logs:

Event Viewer (Start / Windows Administrative Tools / EventViewer)
In the tree, select:
Event Log / Applications and Services Log / Microsoft / Windows / Failover Clustering / Diagnostics

-------

make new windows boot menu entry:

bcdedit /copy {default} /d "DRBD"

bcdedit /enum all

-----

Diskless client over TCP/IP

When booting directly (image mounted as disk): remove windrbd.sys driver:

cd Linbit/tmp
sudo mount /dev/sdf2 mnt/
rm mnt/Windows/System32/drivers/windrbd.sys
sudo umount mnt

Installing driver via Linux:

cd Linbit/tmp
sudo mount /dev/sdf2 mnt/
cp ../windrbd/converted-sources/drbd/windrbd.sys mnt/Windows/System32/drivers/windrbd.sys
sudo umount mnt

(or:
cp ../inf-files/windrbd-bootc.sys mnt/Windows/System32/drivers/windrbd.sys 
)

(does not touch registry)

# create a small text file to make sure it is the right image:

# copy con xxx.txt
# 123^Z

sudo chmod o+rw /dev/sdf
sudo drbdadm up tiny-windows-disk
# adjust IP address of peer in DRBD config:
sudo vi /etc/drbd.d/tiny-windows-boot.res 
sudo drbdadm up tiny-windows-boot 
sudo drbdadm up tiny-windows-system

# linux: 
# nc -p 5000 -l -k | tee /tmp/ipxe.log

Power on Diskless Client VM
Press Ctrl-B to interrupt iPXE
dhcp net1
boot http://192.168.56.102/~johannes/ipxe/ipxework.pxe

Press Ctrl-B again
dhcp net1
sanboot http://192.168.56.102/cgi-bin/drbd.cgi

-----

Build ipxe

make DEBUG=drbd && cp bin/ipxe.pxe ~/public_html/ipxe/ipxework.pxe
# make DEBUG=sanboot,int13,httpcore:2,httpblock,blocktrans:2,xfer,xferbuf && cp bin/ipxe.pxe ~/public_html/ipxe/ipxework.pxe

# 64 bit version can boot 32 GB images
make bin-x86_64-pcbios/ipxe.pxe 

# Use this from now on:
make && cp bin/ipxe.pxe ~/public_html/ipxe/ipxework.pxe

iPXE is configured via header files in src/config

make DEBUG=ibft:3,iscsi:3
sudo cp bin/ipxe.pxe /var/www/html/ipxe/ipxe-iscsi.pxe 

make DEBUG=ibft:3,iscsi:3,int13:3,drbd:3

make DEBUG=ibft:3,drbd:3

-----

Windows Server 2016: empty password: Start->Windows Verwaltungstools->Lokale Sicherheitsrichtlinie->Kontorichtlinien->Kennwortrichtlinien->Alter auf 0, Komplexit ausschalten.

-----

Change hostname

sysdm.cpl → Computer Name → Change → More... has a "Primary DNS suffix" option, which might be helpful here.

(and reboot)
--------

Disable automatic upgrades on Ubuntu:

 $ sudo -e /etc/apt/apt.conf.d/10periodic
Add line:
APT::Periodic::Unattended-Upgrade "0";

-------

Enable kernel serial console logging

vi /etc/default/grub 
GRUB_CMDLINE_LINUX="console=ttyS0,38400n8"
sudo update-grub
sudo reboot

And log /dev/pts/X on much/vamp to file (Simon)

----------

Dump memory from virtual box VM:

/usr/local/bin/vboxmanage debugvm "WinDRBD 2" dumpvmcore --filename Win7Lockup.elf

Then look for SPINLOCK:

strings Win7Lockup.elf | grep SPINLOCK -A 5 | tee spinlocks-win7.txt

-----

Dump memory from DisklessClient (has a terminating space):

/usr/local/bin/vboxmanage debugvm {d3dc244a-ad1f-47c2-a774-7bf04576541d} dumpvmcore --filename DisklessBootNoRootDevice.elf

-----

Enable driver verifier:

verifier /standard /driver windrbd.sys

-------

Installing and configuring DHCP server (Ubuntu)

sudo apt-get install isc-dhcp-server
(sudo apt-get -o Acquire::ForceIPv4=true install isc-dhcp-server)

sudo vi /etc/dhcp/drbdd.conf

Add:

The options from 
http://ipxe.org/howto/dhcpd#pxe_chainloading

And further down:

# solution works 'for me'. It tests for iSCSI, where sanboot http://...
# is sufficient. iscsi seems to be closely related to sanboot. The
# off the shelf VirtualBox iPXE build does not have iscsi enabled,
# therefore we load a custom built image which then executes the
# sanboot command.
if exists ipxe.iscsi {
        filename "";
        option root-path "http://192.168.56.102/cgi-bin/drbd.cgi";
} else {
        filename "http://192.168.56.102/~johannes/ipxe/ipxework.pxe";
}

Also add windrbd-root option:

option ipxe.windrbd-root code 196 = string;

After changes restart dhcp server with

sudo service isc-dhcp-server restart

DisklessClient should now boot into windows without need to type
boot commands.

Configure fixed IP Address:

host diskless-client {
        hardware ethernet 08:00:27:b2:a9:32;
        fixed-address 192.168.56.150;
}

Configure dynamic range (don't do this, DRBD needs a fixed address):

subnet 192.168.56.0 netmask 255.255.255.0 {
        range 192.168.56.160 192.168.56.250;
}

Not sure yet how it works with 2 networks (iPXE of VirtualBox seems
not to try the second network if something with the first network
fails, however this works with the custom built iPXE)

To make dhcp work the network adapter must be allowed promiscious
mode (see advanced settings of network adapter in VirtualBox network
adapter settings).
-------

Disable page file with Windows (captions may differ I have a German
Windows):

Open cmd.exe as Administrator

SystemPropertiesAdvanced.exe

Then under Advanced Tab click the Performance button (topmost)

Then under Advanced Tab / Virtual Memory / No page file

----

Avoid chmod of /dev/sdf:

Add www-data user to group disk

Or better add an extra group for drbd devices and use udev(?) to
control the device node.
-----

Temporary format of 'drbd' URI: no colons since they are used by
IPv6 addresses.

drbd:<res>;<proto>;<num-nodes>;<my-ip>;<my-minor>;<my-volume>;<peer-name>;<peer-node-id>;<peer-address>

----

Build documentation:

make tech-guides-pdf-finalize-docker

-----

Booting

See the tech-guide on booting

Neccessary steps:

Install WinDRBD Bus driver
	Device manager: add legacy hardware: windrbd.inf

Install WinDRBD Disk driver
	(else will not call START_DEVICE PnP request)
	To do so install windrbd with boot device and wait for
	primary disabled and do Update driver software in
	device manager (windrbd-disk.inf).

	Do a drbdadm up of a dummy device (does not need to
	have backing storage or connection)

	TODO: Maybe it is also possible to just doubleclick the
	inf file which makes things far more easier.

Install windrbd driver with boot and wait for primary in
	windrbd I/O requests (not windrbd_pnp, but windrbd_create)

# Also: Disable UDP logging (NO_NET_PRINTK) in printk-to-syslog

Enable NIC driver
	E1 something for my VirtualBox

Enable AFD driver (unclear if really needed)

Enable Broadcom drivers (unclear if really needed)

Currently: Assign a fixed IP address (must match the one in DRBD
	config). TODO: which driver to load on boot to make
	DHCP work?

Also Disable Network Discovery (else there is a short time gap
	in which network is down and Windows needs to access
	boot device in order to continue):

	(from https://social.technet.microsoft.com/Forums/en-US/675520ed-fe25-455e-a86e-fdb833903b10/windows-takes-an-exceptionally-long-time-to-establish-a-network-connection-after-booting

	Control Panel\Network and Internet\Network and Sharing Center\Advanced sharing settings

	Turn OFF network discovery

Disable NDIS lightweight filter for boot NIC:

	https://support.microsoft.com/en-us/help/976042/windows-may-fail-to-boot-from-an-iscsi-drive-if-networking-hardware-is

	Not clear if that really helps .. still there is a 90 seconds
	(at least) delay.

----

Windows 10: to access network share as guest:
Windows-R gpedit.msc
Computer Configuration -> Administrative Templates -> Network -> Lanman Workstation Enable insecure guest logons Set to Enabled and click Ok


-----

Windbg:

Connect Windows VMs via host pipe serial port.

On target (see https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/setting-up-a-null-modem-cable-connection)

bcdedit /debug on
bcdedit /dbgsettings serial debugport:1 baudrate:115200

Start windbg on debug host (it crashes on connect, just restart
it with Kernel debug ... (Ctrl-K)) after it crashed, then it should
connect.

File -> Symbol search path (net use y: \\192.168.56.102\Linbit):
srv*;Y:\windrbd\win4lin\src;Y:\windrbd\converted-sources\drbd

-----

netsh:

Turn off firewall:

NetSh Advfirewall set allprofiles state off

Check status:

Netsh Advfirewall show allprofiles

# Turn off firewall in Windows PE:

wpeutil disablefirewall

-----

kpartx -a /dev/drbdN
	creates a /dev/dm-X for each partition on /dev/drbdN 
	those then can be mounted like any other disk.

kpartx -d /dev/drbdN
	removes /dev/dm-X for each partition on /dev/drbdN 
	needed before drbdadm down.

Document this is some user's guide.
----
iISCSI:

sudo apt-get install istgt
copy config files from /usr/share/doc/istgt/examples/
gunzip istgt.cont

dd if=/dev/zero of=filename bs=1024 size=$[ 50*1024 ]

edit in /etc/istgt/istgt.conf
PortalGroup1 IP Address
InitiatorGroup1 Netmask
LogicalUnit1 Storage (filename and size)

sudo istgt -D
sudo istgt -D -t all

sudo apt-get open-iscsi
sudo iscsi_discovery 192.168.56.102

sudo iscsistart -i test -t iqn.2007-09.jp.ne.peach.istgt:disk1 -g 1 -a 192.168.56.102

sudo iscsiadm -m node -T iqn.2007-09.jp.ne.peach.istgt:disk1 -p 192.168.56.102:3260

sudo iscsiadm -m node -T iqn.2007-09.jp.ne.peach.istgt:disk1 -p 192.168.56.102:3260 --login

Then /dev/sdm exists: can mount it:

sudo mount /dev/sdm mnt

sudo iscsiadm -m node -T iqn.2007-09.jp.ne.peach.istgt:disk1 -p 192.168.56.102:3260 --logout
----
iSCSI via iPXE:

dhcp net0
sanboot -k iscsi:192.168.56.102::::iqn.2007-09.jp.ne.peach.istgt:disk1
# sanboot iscsi:192.168.56.102::::iqn.2007-09.jp.ne.peach.istgt:disk1
# sanboot iscsi:192.168.56.102:::1:iqn.2007-09.jp.ne.peach.istgt:disk1
