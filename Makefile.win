# vim: set ft=make ts=8 sw=8 noet :

# Set this to your Ewdk build environment. You most likely
# have to create a new one (see the ifeq's in this Makefile)
# to get the pathes right. You also should add a ms-cl-$(BUILD_ENV)
# wrapper script to call the Microsoft C compiler (see the VC variable).
#
# Please use your initials to name the build env if you want to
# commit your changes upstream.
#
# For now run make copy in the windrbd root directory whenever you
# change this Makefile or the ms-cl*.cmd wrappers.
#
# Don't change default here, put it into your .bashrc instead:
# (like export BUILD_ENV=blub)
#
# BUILD_ENV ?= jt-server2016

ifndef BUILD_ENV
$(error BUILD_ENV not set. Please set the BUILD_ENV environment variables (export BUILD_ENV=blub in bash) and add settings to Makefile.win (don't forget make copy) )
endif

# TODO: unset this for production releases.
KMALLOC_DEBUG = 1
# BIO_REF_DEBUG = 1

ifeq ($(BUILD_ENV),jt-win7)
export EWDK_BASE := c:\\Ewdk
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.15063.0
EWDK_BIN := $(EWDK_KIT)\\bin\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-server2019)
# export EWDK_BASE := c:\\Ewdk
# need to "mount" ISO: double click ISO on console
export EWDK_BASE := e:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
# EWDK_VERSION := 10.0.17134.0
EWDK_VERSION := 10.0.19041.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019

ifeq ($(BUILD_ENV),jt-win7-32bit)
export EWDK_BASE := c:\\Ewdk1703
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.15063.0
EWDK_BIN := $(EWDK_KIT)\\bin\\x86

# Name of the pfx file (without extension)
KEY = linbit-ha
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows-32bit

CONFIG_32BIT = 1
endif

# (does not work)
# https://www.microsoft.com/en-us/download/details.aspx?id=11800
# also does not work (can't start cl):
# git clone https://github.com/9176324/WinDDK.git
# But it works after doing:
# cd /cygdrive/c/WinDDK
# find . -iname \*.exe | xargs chmod a+x
# find . -iname \*.dll | xargs chmod a+x

# But does not work at all .. C compiler does not understand
# gcc extension at all use jt-win7-32bit environment instead
ifeq ($(BUILD_ENV),jt-win7-32bit-server2003)
export EWDK_BASE := C:\\WinDDK
EWDK_VERSION := 7600.16385.1
EWDK_KIT := $(EWDK_BASE)\\$(EWDK_VERSION)
EWDK_BIN := $(EWDK_KIT)\\bin\\x86

# Name of the pfx file (without extension)
KEY = linbit-ha
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows

CONFIG_32BIT = 1
DDK = 1
endif

# Linux build host running MSVC compiler using wine :)

ifeq ($(BUILD_ENV),jt-wine)

# mounting of the ewdk can be done with Linux mount command:
# cd ~/.wine/dosdevices
# sudo mount -o loop ~/EWDK_ni_release_22621_220506-1250.iso e:

export EWDK_BASE := E:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.22621.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# WINE=wine
# We have a 32 bit and a 64 bit installation this one is the right one:
WINE=/usr/bin/wine

VC := $(WINE) cmd /c ms-cl-$(BUILD_ENV).cmd

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

# My diskless WinDRBD sysroot machine :)

ifeq ($(BUILD_ENV),jt-diskless-windrbd-sysroot)
export EWDK_BASE := d:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.17763.0 # TODO: ?
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-ha
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-win10)
export EWDK_BASE := e:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.17763.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-win10-32bit)
export EWDK_BASE := d:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.17763.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-ha
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows

CONFIG_32BIT = 1
endif

ifeq ($(BUILD_ENV),jt-server2016)
export EWDK_BASE := c:\\Ewdk
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.17763.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-ha
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-win10ent-2020)
export EWDK_BASE := e:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.19041.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-opennebula-vm)
export EWDK_BASE := h:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.22621.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = Y:\\drbd-utils-windows
endif

ifeq ($(BUILD_ENV),jt-opennebula2022-vm)
export EWDK_BASE := f:
EWDK_KIT := $(EWDK_BASE)\\Program Files\\Windows Kits\\10
EWDK_VERSION := 10.0.22621.0
EWDK_BIN := $(EWDK_KIT)\\bin\\$(EWDK_VERSION)\\x86

# Name of the pfx file (without extension)
KEY = linbit-2019
PASSWD = ""

WINDRBD_SOURCE = ..
DRBD_UTILS_SOURCE = ..\\..\\..\\drbd-utils-windows
endif

ifndef EWDK_VERSION
$(error EWDK_BASE not set. Please edit Makefile to make it know about your ewdk installation.)
endif

# This is relative to the inno-setup directory
DRIVER_DIR ?= converted-sources\\drbd

ifdef CONFIG_32BIT
CYGWIN_BINARIES = cygwin-binaries-x86
else
CYGWIN_BINARIES = cygwin-binaries
endif

ifdef DDK
EWDK_INC := $(EWDK_KIT)\\inc
EWDK_LIB := $(EWDK_KIT)\\lib\\wnet\\i386
else
EWDK_INC := $(EWDK_KIT)\\Include
EWDK_LIB := $(EWDK_KIT)\\Lib
endif

VC ?= /cygdrive/c/Windows/System32/cmd.exe /c ms-cl-$(BUILD_ENV).cmd
MSBUILD ?= /cygdrive/c/Windows/System32/cmd.exe /c run-msbuild.cmd
CERTMGR := "$(EWDK_BIN)/certmgr.exe"

# /a      for debugging output


# CL.exe takes (AND RETURNS) forward slashes; that makes navigating an error output easy.
ifdef DDK
C_DEFINES += -D inline=__inline
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)"\\ddk
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)"\\crt
else
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)\\$(EWDK_VERSION)\\shared"
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)\\$(EWDK_VERSION)\\km"
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)\\$(EWDK_VERSION)\\km\\crt"
WIN_INCLUDE_DIRS += "-I$(EWDK_INC)\\$(EWDK_VERSION)\\um"

WIN_DEF_INCLUDES += /FI"$(EWDK_INC)/$(EWDK_VERSION)\\shared\\warning.h"
endif
# include that file

WIN_CFLAGS += /c /nologo /W4 
ifndef DDK
WIN_CFLAGS += /Zi # /Zi gives us a PDB file; without that we'd get debug information in the .obj file instead
endif
WIN_CFLAGS += /WX # warnings == errors
ifndef DDK
WIN_CFLAGS += /Wv:18 # disable hides previous local declaration
endif
WIN_CFLAGS += /O2 # optimize for speed
WIN_CFLAGS += /Oi # enable intrinsic functions
WIN_CFLAGS += /Oy- # enable frame pointer omission

ifdef CONFIG_32BIT
C_DEFINES += -D _X86_=1 -D i386=1 -D _M_IX86=1 # 32bit
# C_DEFINES += -D DECLSPEC_IMPORT="__declspec(dllimport)" -D _WIN32_WINNT=0x0601 -D WINVER=0x0601 -D WINNT=1 -D NTDDI_VERSION=0x06010000 -D KMDF_VERSION_MAJOR=1 -D KMDF_VERSION_MINOR=15 
C_DEFINES += -D _WIN32_WINNT=0x0502 -D WINVER=0x0502 -D WINNT=1 -D NTDDI_VERSION=0x05020000
else
C_DEFINES += -D _WIN64 -D _AMD64_ -D AMD64 -D _M_AMD64 # 64bit
C_DEFINES += -D STD_CALL -D DEPRECATE_DDK_FUNCTIONS=1 -D MSC_NOOPT -D _WIN32_WINNT=0x0601 -D WINVER=0x0601 -D WINNT=1 -D NTDDI_VERSION=0x06010000 -D KMDF_VERSION_MAJOR=1 -D KMDF_VERSION_MINOR=15 
# This makes Windows use NonPagedPoolNx instead of NonPagedPool for
# memory allocations. This is needed to pass the code integrity tests
# for hardware lab kit (HLK) needed for SecureBoot.
C_DEFINES += -DPOOL_NX_OPTIN=1
endif

# C_DEFINES += -D DBG=1
ifdef R
C_DEFINES += -D RELEASE=1
endif
ifdef KMALLOC_DEBUG
C_DEFINES += -D KMALLOC_DEBUG=1
endif
ifdef BIO_REF_DEBUG
C_DEFINES += -D BIO_REF_DEBUG=1
endif

ifdef CONFIG_32BIT
# /Gy makes declspec(dllimport) work incorrectly (need _foo@4 decoration for
# 32 bit linking) need to specify /Gz (default to stdcall) for making linking
# working. /Gs1048576 disables calls to chkstk()
WIN_CFLAGS += /GF /Gm- /Zp8 /Gz /Gs1048576
else
WIN_CFLAGS += /GF /Gm- /Zp8 /GS /Gy 
endif
# /fp:precise  # precise - "precise" floating-point model; results are predictable
WIN_CFLAGS += /Zc:wchar_t- /Zc:forScope /GR- 
# Output preprocessor output. Disable this to compile 'normally'
# WIN_CFLAGS += /P
# On x64, there's only one calling convention. https://msdn.microsoft.com/en-us/library/zthk2dkh.aspx
# WIN_CFLAGS += /Gz # __stdcall calling convention  -- is default
# WIN_CFLAGS += /Gr # __fastcall calling convention -- is what we want for linux compat
WIN_CFLAGS += /wd4748 /wd4603 /wd4627 /wd4986 /wd4987 /wd4996 
ifndef DDK
WIN_CFLAGS += /analyze- /errorReport:queue /kernel -cbstring /d1import_no_registry /d2AllowCompatibleILVersions /d2Zi+ 
endif
C_DEFINES += -D __KERNEL__=1
C_DEFINES += -D __BYTE_ORDER=1 -D __LITTLE_ENDIAN=1 -D __LITTLE_ENDIAN_BITFIELD

# see ./shared/sdkddkver.h for a list.
# this is Windows XP
# C_DEFINES += -D NTDDI_VERSION=0x05010000

# WIN_CFLAGS += /Ze # Microsoft extensions - eg. nameless struct/union. Not enabled because
#   The /Ze option is deprecated because its behavior is on by default. We recommend you use the /Zc (Conformance) compiler options to control specific language extension features.
# but there's no setting for that.
WIN_CFLAGS += /wd4201

# drbd-headers\drbd_protocol.h(466): warning C4200: nonstandard extension used: zero-sized array in struct/union
WIN_CFLAGS += /wd4200

WIN_INCLUDE_DIRS += -I"..\\..\\windrbd\\include"
WIN_INCLUDE_DIRS += -I"."
WIN_INCLUDE_DIRS += -I".\\drbd-headers"

WIN_CFLAGS += $(WIN_INCLUDE_DIRS)
ifeq (V,1)
WIN_CFLAGS += /showIncludes 
endif

# TODO: remove this it is duplicate
# C_DEFINES += -D _WIN64=1
C_DEFINES += -D COMPAT_HAVE_BOOL_TYPE=1 # for "typedef bool" in drbd/linux/lru_cache.h
# C_DEFINES += -D _AMD64_=1

C_DEFINES += -D CONFIG_KREF_DEBUG=1

WIN_CFLAGS += $(C_DEFINES)

# How to calculate the debug name
fPDB = $(patsubst %.c,%.pdb,$(1))

WIN_LDFLAGS += /link # must be first!
# Was:
WIN_LDFLAGS += /DRIVER:WDM /SUBSYSTEM:NATIVE /NODEFAULTLIB /ENTRY:DriverEntry
# However this prevents the driver from being unloaded. We try
# this now:
# Commented out. Else cannot find __imp_KeGetCurrentIrql symbol on linking
# WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)/win7/km/x64/"
# WIN_LDFLAGS += /DRIVER /SUBSYSTEM:WINDOWS /NODEFAULTLIB /ENTRY:DriverEntry

ifdef DDK
WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)"
else
ifdef CONFIG_32BIT
WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)/win7/km/x86/"
WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)/$(EWDK_VERSION)/km/x86/"
else
WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)/win7/km/x64/"
WIN_LDFLAGS += "/LIBPATH:$(EWDK_LIB)/$(EWDK_VERSION)/km/x64/"
endif
endif

WIN_LDFLAGS += /DEBUG:FULL

WIN_LINK_INPUT += wdm.lib
WIN_LINK_INPUT += ntoskrnl.lib
ifndef CONFIG_32BIT
WIN_LINK_INPUT += bufferoverflowfastfailk.lib # for __security_check_cookie
WIN_LINK_INPUT += netio.lib
WIN_LINK_INPUT += aux_klib.lib
else
WIN_LINK_INPUT += bufferoverflowk.lib # for __security_check_cookie
endif
ifdef CONFIG_32BIT
WIN_LINK_INPUT += wdmsec.lib
endif
WIN_LINK_INPUT += ksecdd.lib
# TODO: used?
# WIN_LINK_INPUT += "$(EWDK_LIB)/win8/km/x64/aux_klib.lib"
WIN_LINK_INPUT += hal.lib
WIN_LINK_INPUT += aux_klib.lib

# TODO: only for 32 bit?
WIN_LINK_INPUT += iointex.lib
WIN_LINK_INPUT += procgrp.lib
# WIN_LINK_INPUT += setupapi.lib

DRBD_FILES = drbd_buildtag.c drbd_bitmap.c drbd_proc.c
DRBD_FILES += drbd_sender.c drbd_receiver.c drbd_req.c drbd_actlog.c
DRBD_FILES += lru_cache.c drbd_main.c drbd_strings.c drbd_nl.c
DRBD_FILES += drbd_interval.c drbd_state.c drbd_kref_debug.c
DRBD_FILES += drbd_nla.c drbd_transport.c drbd_transport_tcp.c kref_debug.c

WINDRBD_SRCDIR = ../../windrbd/src

WINDRBD_FILES = $(WINDRBD_SRCDIR)/Attr.c $(WINDRBD_SRCDIR)/disp.c $(WINDRBD_SRCDIR)/drbd_windows.c $(WINDRBD_SRCDIR)/hweight.c \
		$(WINDRBD_SRCDIR)/idr.c $(WINDRBD_SRCDIR)/kmalloc_debug.c $(WINDRBD_SRCDIR)/mempool.c $(WINDRBD_SRCDIR)/printk-to-syslog.c \
		$(WINDRBD_SRCDIR)/rbtree.c $(WINDRBD_SRCDIR)/seq_file.c $(WINDRBD_SRCDIR)/slab.c $(WINDRBD_SRCDIR)/util.c $(WINDRBD_SRCDIR)/windrbd_bootdevice.c \
		$(WINDRBD_SRCDIR)/windrbd_device.c $(WINDRBD_SRCDIR)/windrbd_drbd_url_parser.c $(WINDRBD_SRCDIR)/windrbd_module.c \
		$(WINDRBD_SRCDIR)/windrbd_netlink.c $(WINDRBD_SRCDIR)/windrbd_test.c $(WINDRBD_SRCDIR)/windrbd_threads.c \
		$(WINDRBD_SRCDIR)/windrbd_usermodehelper.c $(WINDRBD_SRCDIR)/windrbd_waitqueue.c \
		$(WINDRBD_SRCDIR)/windrbd_winsocket.c $(WINDRBD_SRCDIR)/windrbd_locking.c \
		$(WINDRBD_SRCDIR)/tiktok.c $(WINDRBD_SRCDIR)/partition_table_template.c

all: versioninfo windrbd.sys

.PHONY: versioninfo
versioninfo:
# you can do make VERSION=test to have test as version
	cd ../.. && ./versioninfo.sh converted-sources $(VERSION) || true

windrbd.sys: $(patsubst %.c,%.obj,$(DRBD_FILES)) $(patsubst %.c,%.obj,$(WINDRBD_FILES)) resource.res windrbd-event-log.res
	rm -f windrbd.pdb "_$@"
	$(VC) $(WIN_LINK_INPUT) $^ $(WIN_LDFLAGS) /PDB:"windrbd.pdb" /OUT:"_$@"
	mv -f "_$@" "$@"
# currently does not work with wine:
	$(WINE) "$(EWDK_BIN)/inf2cat.exe" /driver:. /os:XP_X86,Vista_X86,Vista_X64,7_X86,7_X64,8_X86,8_X64,6_3_X86,6_3_X64,10_X86,10_X64
# No driver signing on 32 bit platforms ...
ifndef CONFIG_32BIT
ifdef R
# Linbit DigiCert certificate (trusted by Microsoft)
# For Windows Server 2008 use SHA1 as secure hash
#	"$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /v /ac "C:\cert\DigiCert High Assurance EV Root CA.crt" /a /t http://timestamp.digicert.com "$@"
	$(WINE) "$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /v /ac "C:\cert\DigiCertTrustedRootG4.crt" /a /t http://timestamp.digicert.com "$@"
# Thanks to David Grayson (http://www.davidegrayson.com/signing/#howto)
	$(WINE) "$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /v /ac "C:\cert\DigiCertTrustedRootG4.crt" /a /t http://timestamp.digicert.com windrbd.cat
else
# We need a self signed certificate which has to be added to the
# Windows certificate store in order to load the driver. See
# readme.txt file in the crypto directory to learn how to create it.

# does not work under wine ... MFC42.dll missing.
	$(WINE) "$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /f ../../crypto/$(KEY).pfx /p $(PASSWD) /v "$@"
	$(WINE) "$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /f ../../crypto/$(KEY).pfx /p $(PASSWD) /v windrbd.cat
endif
endif

resource.res: resource.rc
	$(WINE) "$(EWDK_BIN)/rc.exe" $<

windrbd-event-log.rc: ../../windrbd/windrbd-event-log.mc
	$(WINE) "$(EWDK_BIN)/mc.exe" $<

windrbd-event-log.h: ../../windrbd/windrbd-event-log.mc
	$(WINE) "$(EWDK_BIN)/mc.exe" $<

$(WINDRBD_SRCDIR)/printk-to-syslog.obj: windrbd-event-log.h

windrbd-event-log.res: windrbd-event-log.rc
	$(WINE) "$(EWDK_BIN)/rc.exe" $<

%.obj: %.c
	rm -f "$(call fPDB,$<)"
ifdef DDK
	$(VC) $(WIN_CFLAGS) $< /c /Fo"$@" /Fd"$(call fPDB,$<)"
else
	$(VC) $(WIN_CFLAGS) $(WIN_DEF_INCLUDES) "$<" /c /Fo:"$@" /Fd:"$(call fPDB,$<)"
endif

# /Fi:"$(patsubst %.c,%.E,$<)" ...  cl : Command line warning D9007 : '/Fi:' requires '/P'; option ignored
	echo "-- $@ done --"

%.E: %.c
	$(VC) $(WIN_CFLAGS) $(WIN_DEF_INCLUDES) "$<" /E > "$@"

deps:
	gcc -D BITS_PER_LONG=64 -D _MSC_VER=1300 -D _WIN32=1 $(C_DEFINES) $(WIN_INCLUDE_DIRS) $(subst /FI,-include ,$(WIN_DEF_INCLUDES)) -M *.c ../../windrbd/src/*.c | perl -pe 's/^(\S+)\.o:/\1.obj \1.E:/' > Makefile.deps 

install:
	bash -c 'cwd=`pwd` ; /cygdrive/c/Windows/System32/InfDefaultInstall.exe `cygpath -w "$${cwd}"`\\windrbd.inf'

-include Makefile.deps

clean:
	rm -f *.obj *.pdb
	rm -f $(WINDRBD_SRCDIR)/*.obj $(WINDRBD_SRCDIR)/*.pdb
	rm -f windrbd.sys windrbd.cat
	rm -f windrbd-event-log.*

package: windrbd.sys
	( cd ../../inno-setup && $(WINE) iscc windrbd.iss /DWindrbdSource=$(WINDRBD_SOURCE) /DWindrbdUtilsSource=$(DRBD_UTILS_SOURCE) /DWindrbdDriverDirectory=$(DRIVER_DIR) )
ifdef R
	( cd ../../inno-setup &&  $(WINE) "$(EWDK_BIN)/signtool.exe" sign /fd SHA256 /v /ac "C:\cert\DigiCertTrustedRootG4.crt" /a /t http://timestamp.digicert.com install-`sed -e 's/[^"]*"\([^"]*\).*/\1/g' version.iss`.exe )
endif
	chmod a+x ../../inno-setup/install*.exe

upload: package
	( cd ../../inno-setup && curl -f -u jthoma --upload-file install-`sed -e 's/[^"]*"\([^"]*\).*/\1/g' version.iss`.exe https://nexus.at.linbit.com/repository/windows/WinDRBD/install-`sed -e 's/[^"]*"\([^"]*\).*/\1/g' version.iss`.exe )
	( cd ../../inno-setup && curl -f -u jthoma --upload-file install-`sed -e 's/[^"]*"\([^"]*\).*/\1/g' version.iss`.exe https://nexus.at.linbit.com/repository/windows/WinDRBD/install-windrbd-latest.exe )

# TODO: this is required for Windows Server 2022 and Windows 11
codeql:
#	cd ../..
#	rm -rf codeql-database

# TODO: generate rebuild-windrbd.cmd must run in Windows dev environment.
#	codeql database create codeql-database --language="cpp" --command=rebuild-windrbd.cmd --source-root=.
#	codeql database analyze .\codeql-database ..\codeql\Windows-Driver-Developer-Supplemental-Tools\codeql\windows-drivers\queries\suites\windows_driver_mustfix.qls --format=sarif-latest --output=.\visual-studio-2019-files\WinDRBD\WinDRBD\must-fix.sarif
# or:
#	codeql database analyze .\codeql-database ..\codeql\Windows-Driver-Developer-Supplemental-Tools\codeql\windows-drivers\queries\suites\windows_driver_recommended.qls --format=sarif-latest --output=.\visual-studio-2019-files\WinDRBD\WinDRBD\recommended.sarif

code-analysis:
	cd ../../visual-studio-2019-files/WinDRBD/WinDRBD && $(MSBUILD) WinDRBD.vcxproj /p:Configuration=Release /p:Platform=x64 /p:RunCodeAnalysis=True

sdv:
	cd ../../visual-studio-2019-files/WinDRBD/WinDRBD && $(MSBUILD) /t:sdv /p:Inputs="/check:default.sdv /debug" WinDRBD.vcxproj /p:Configuration=Release /p:Platform=x64 /maxCpuCount:8

# No codeql for now, Windows Server 2019 (and before) cannot read it.

dvl:
	cd ../../visual-studio-2019-files/WinDRBD/WinDRBD && $(MSBUILD) /t:dvl WinDRBD.vcxproj /p:Configuration=Release /p:Platform=x64
	bash -c 'sed -e '/Semmle/d' ../../visual-studio-2019-files/WinDRBD/WinDRBD/WinDRBD.DVL.XML > ../../WinDRBDServer2019.DVL.XML'
	@echo 'Now copy the WinDRBDServer2019.DVL.XML file into the C:\DVL directory (create it if it does not exist) on the HLK test client and rerun Static Tools Logo test'

server2019-dvl-rebuild: sdv code-analysis dvl
