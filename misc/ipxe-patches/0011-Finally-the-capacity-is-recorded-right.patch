From dfe143078a739b94399f927ac08d6d6e51b9b338 Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Fri, 11 Jan 2019 18:35:19 +0100
Subject: [PATCH 11/13] Finally the capacity is recorded right ..

After changing several other interface functions. Now go test
it with real image.
---
 src/core/blocktrans.c       | 10 +++++++---
 src/core/xferbuf.c          | 29 ++++++++++++++++-------------
 src/include/ipxe/xferbuf.h  | 10 +++++-----
 src/interface/efi/efi_pxe.c |  4 ++--
 4 files changed, 30 insertions(+), 23 deletions(-)

diff --git a/src/core/blocktrans.c b/src/core/blocktrans.c
index 7109faee..d7c12204 100644
--- a/src/core/blocktrans.c
+++ b/src/core/blocktrans.c
@@ -46,10 +46,11 @@ FILE_LICENCE ( GPL2_OR_LATER_OR_UBDL );
  * @ret rc		Return status code
  */
 static int blktrans_xferbuf_realloc ( struct xfer_buffer *xferbuf,
-				      size_t len ) {
+				      uint64_t len ) {
 	struct block_translator *blktrans =
 		container_of ( xferbuf, struct block_translator, xferbuf );
 
+DBGC ( xferbuf, "len is %lld\n", len);
 	/* Record length, if applicable */
 	if ( blktrans->buffer ) {
 
@@ -72,11 +73,12 @@ static int blktrans_xferbuf_realloc ( struct xfer_buffer *xferbuf,
  * @v data		Data to copy
  * @v len		Length of data
  */
-static void blktrans_xferbuf_write ( struct xfer_buffer *xferbuf, size_t offset,
+static void blktrans_xferbuf_write ( struct xfer_buffer *xferbuf, int64_t offset,
 				     const void *data, size_t len ) {
 	struct block_translator *blktrans =
 		container_of ( xferbuf, struct block_translator, xferbuf );
 
+DBGC ( xferbuf, "blktrans_xferbuf_write offset is %lld len is %zd\n", offset, len );
 	/* Write data to buffer, if applicable */
 	if ( blktrans->buffer ) {
 
@@ -98,7 +100,7 @@ static void blktrans_xferbuf_write ( struct xfer_buffer *xferbuf, size_t offset,
  * @v data		Data to read
  * @v len		Length of data
  */
-static void blktrans_xferbuf_read ( struct xfer_buffer *xferbuf, size_t offset,
+static void blktrans_xferbuf_read ( struct xfer_buffer *xferbuf, int64_t offset,
 				    void *data, size_t len ) {
 	struct block_translator *blktrans =
 		container_of ( xferbuf, struct block_translator, xferbuf );
@@ -170,6 +172,8 @@ static int blktrans_deliver ( struct block_translator *blktrans,
 			      struct xfer_metadata *meta ) {
 	int rc;
 
+DBGC ( blktrans, "blktrans_deliver size is %lld\n", meta->offset );
+
 	/* Deliver to buffer */
 	if ( ( rc = xferbuf_deliver ( &blktrans->xferbuf, iob_disown ( iobuf ),
 				      meta ) ) != 0 ) {
diff --git a/src/core/xferbuf.c b/src/core/xferbuf.c
index d7dc1a05..e403f276 100644
--- a/src/core/xferbuf.c
+++ b/src/core/xferbuf.c
@@ -69,17 +69,17 @@ void xferbuf_free ( struct xfer_buffer *xferbuf ) {
  * @v len		Required minimum size
  * @ret rc		Return status code
  */
-static int xferbuf_ensure_size ( struct xfer_buffer *xferbuf, size_t len ) {
+static int xferbuf_ensure_size ( struct xfer_buffer *xferbuf, int64_t len ) {
 	int rc;
 
 	/* If buffer is already large enough, do nothing */
-	if ( len <= xferbuf->len )
+	if ( (uint64_t) len <= xferbuf->len )
 		return 0;
 
 	/* Extend buffer */
 	if ( ( rc = xferbuf->op->realloc ( xferbuf, len ) ) != 0 ) {
 		DBGC ( xferbuf, "XFERBUF %p could not extend buffer to "
-		       "%zd bytes: %s\n", xferbuf, len, strerror ( rc ) );
+		       "%lld bytes: %s\n", xferbuf, len, strerror ( rc ) );
 		return rc;
 	}
 	xferbuf->len = len;
@@ -95,16 +95,18 @@ static int xferbuf_ensure_size ( struct xfer_buffer *xferbuf, size_t len ) {
  * @v data		Data to write
  * @v len		Length of data
  */
-int xferbuf_write ( struct xfer_buffer *xferbuf, size_t offset,
+int xferbuf_write ( struct xfer_buffer *xferbuf, int64_t offset,
 		    const void *data, size_t len ) {
-	size_t max_len;
+	int64_t max_len;
 	int rc;
 
+DBGC ( xferbuf, "xferbuf_write: offset is %lld\n", offset);
 	/* Check for overflow */
 	max_len = ( offset + len );
 	if ( max_len < offset )
 		return -EOVERFLOW;
 
+DBGC ( xferbuf, "xferbuf_write: max_len is %lld len is %zd\n", max_len, len);
 	/* Ensure buffer is large enough to contain this write */
 	if ( ( rc = xferbuf_ensure_size ( xferbuf, max_len ) ) != 0 )
 		return rc;
@@ -125,11 +127,11 @@ int xferbuf_write ( struct xfer_buffer *xferbuf, size_t offset,
  * @v data		Data to write
  * @v len		Length of data
  */
-int xferbuf_read ( struct xfer_buffer *xferbuf, size_t offset,
+int xferbuf_read ( struct xfer_buffer *xferbuf, int64_t offset,
 		   void *data, size_t len ) {
 
 	/* Check that read is within buffer range */
-	if ( ( offset > xferbuf->len ) ||
+	if ( ( (uint64_t) offset > xferbuf->len ) ||
 	     ( len > ( xferbuf->len - offset ) ) )
 		return -ENOENT;
 
@@ -165,6 +167,7 @@ DBGC ( xferbuf, "xferbuf_deliver: meta->offset is %lld\n", meta->offset);
 		pos = 0;
 	pos += meta->offset;
 
+DBGC ( xferbuf, "xferbuf_deliver: pos is %lld len is %zd\n", pos, len);
 	/* Write data to buffer */
 	if ( ( rc = xferbuf_write ( xferbuf, pos, iobuf->data, len ) ) != 0 )
 		goto done;
@@ -185,7 +188,7 @@ DBGC ( xferbuf, "xferbuf_deliver: meta->offset is %lld\n", meta->offset);
  * @v len		New length (or zero to free buffer)
  * @ret rc		Return status code
  */
-static int xferbuf_malloc_realloc ( struct xfer_buffer *xferbuf, size_t len ) {
+static int xferbuf_malloc_realloc ( struct xfer_buffer *xferbuf, uint64_t len ) {
 	void *new_data;
 
 	new_data = realloc ( xferbuf->data, len );
@@ -203,7 +206,7 @@ static int xferbuf_malloc_realloc ( struct xfer_buffer *xferbuf, size_t len ) {
  * @v data		Data to copy
  * @v len		Length of data
  */
-static void xferbuf_malloc_write ( struct xfer_buffer *xferbuf, size_t offset,
+static void xferbuf_malloc_write ( struct xfer_buffer *xferbuf, int64_t offset,
 				   const void *data, size_t len ) {
 
 	memcpy ( ( xferbuf->data + offset ), data, len );
@@ -217,7 +220,7 @@ static void xferbuf_malloc_write ( struct xfer_buffer *xferbuf, size_t offset,
  * @v data		Data to read
  * @v len		Length of data
  */
-static void xferbuf_malloc_read ( struct xfer_buffer *xferbuf, size_t offset,
+static void xferbuf_malloc_read ( struct xfer_buffer *xferbuf, int64_t offset,
 				  void *data, size_t len ) {
 
 	memcpy ( data, ( xferbuf->data + offset ), len );
@@ -237,7 +240,7 @@ struct xfer_buffer_operations xferbuf_malloc_operations = {
  * @v len		New length (or zero to free buffer)
  * @ret rc		Return status code
  */
-static int xferbuf_umalloc_realloc ( struct xfer_buffer *xferbuf, size_t len ) {
+static int xferbuf_umalloc_realloc ( struct xfer_buffer *xferbuf, uint64_t len ) {
 	userptr_t *udata = xferbuf->data;
 	userptr_t new_udata;
 
@@ -256,7 +259,7 @@ static int xferbuf_umalloc_realloc ( struct xfer_buffer *xferbuf, size_t len ) {
  * @v data		Data to copy
  * @v len		Length of data
  */
-static void xferbuf_umalloc_write ( struct xfer_buffer *xferbuf, size_t offset,
+static void xferbuf_umalloc_write ( struct xfer_buffer *xferbuf, int64_t offset,
 				    const void *data, size_t len ) {
 	userptr_t *udata = xferbuf->data;
 
@@ -271,7 +274,7 @@ static void xferbuf_umalloc_write ( struct xfer_buffer *xferbuf, size_t offset,
  * @v data		Data to read
  * @v len		Length of data
  */
-static void xferbuf_umalloc_read ( struct xfer_buffer *xferbuf, size_t offset,
+static void xferbuf_umalloc_read ( struct xfer_buffer *xferbuf, int64_t offset,
 				   void *data, size_t len ) {
 	userptr_t *udata = xferbuf->data;
 
diff --git a/src/include/ipxe/xferbuf.h b/src/include/ipxe/xferbuf.h
index 31c7eccf..e8e4c393 100644
--- a/src/include/ipxe/xferbuf.h
+++ b/src/include/ipxe/xferbuf.h
@@ -35,7 +35,7 @@ struct xfer_buffer_operations {
 	 * @v len		New length (or zero to free buffer)
 	 * @ret rc		Return status code
 	 */
-	int ( * realloc ) ( struct xfer_buffer *xferbuf, size_t len );
+	int ( * realloc ) ( struct xfer_buffer *xferbuf, uint64_t len );
 	/** Write data to buffer
 	 *
 	 * @v xferbuf		Data transfer buffer
@@ -47,7 +47,7 @@ struct xfer_buffer_operations {
 	 * memcpy()-like operation: the caller is responsible for
 	 * ensuring that the write does not exceed the buffer length.
 	 */
-	void ( * write ) ( struct xfer_buffer *xferbuf, size_t offset,
+	void ( * write ) ( struct xfer_buffer *xferbuf, int64_t offset,
 			   const void *data, size_t len );
 	/** Read data from buffer
 	 *
@@ -60,7 +60,7 @@ struct xfer_buffer_operations {
 	 * memcpy()-like operation: the caller is responsible for
 	 * ensuring that the read does not exceed the buffer length.
 	 */
-	void ( * read ) ( struct xfer_buffer *xferbuf, size_t offset,
+	void ( * read ) ( struct xfer_buffer *xferbuf, int64_t offset,
 			  void *data, size_t len );
 };
 
@@ -90,9 +90,9 @@ xferbuf_umalloc_init ( struct xfer_buffer *xferbuf, userptr_t *data ) {
 }
 
 extern void xferbuf_free ( struct xfer_buffer *xferbuf );
-extern int xferbuf_write ( struct xfer_buffer *xferbuf, size_t offset,
+extern int xferbuf_write ( struct xfer_buffer *xferbuf, int64_t offset,
 			   const void *data, size_t len );
-extern int xferbuf_read ( struct xfer_buffer *xferbuf, size_t offset,
+extern int xferbuf_read ( struct xfer_buffer *xferbuf, int64_t offset,
 			  void *data, size_t len );
 extern int xferbuf_deliver ( struct xfer_buffer *xferbuf,
 			     struct io_buffer *iobuf,
diff --git a/src/interface/efi/efi_pxe.c b/src/interface/efi/efi_pxe.c
index a1f81df5..b5b20783 100644
--- a/src/interface/efi/efi_pxe.c
+++ b/src/interface/efi/efi_pxe.c
@@ -317,7 +317,7 @@ static int efi_pxe_ip_filter ( struct efi_pxe *pxe, EFI_IP_ADDRESS *ip ) {
  * @ret rc		Return status code
  */
 static int efi_pxe_buf_realloc ( struct xfer_buffer *xferbuf __unused,
-				 size_t len __unused ) {
+				 uint64_t len __unused ) {
 
 	/* Can never reallocate: return EFI_BUFFER_TOO_SMALL */
 	return -ERANGE;
@@ -331,7 +331,7 @@ static int efi_pxe_buf_realloc ( struct xfer_buffer *xferbuf __unused,
  * @v data		Data to copy
  * @v len		Length of data
  */
-static void efi_pxe_buf_write ( struct xfer_buffer *xferbuf, size_t offset,
+static void efi_pxe_buf_write ( struct xfer_buffer *xferbuf, int64_t offset,
 				const void *data, size_t len ) {
 
 	/* Copy data to buffer */
-- 
2.17.0

