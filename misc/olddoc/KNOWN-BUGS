Note: see TODO for more up to date docs.

---------------------------------------------------------------------
SOLVED: Windows hangs on shutdown

	If we access DRBD device while it is up.

---------------------------------------------------------------------
SOLVED: "DRBD_PANIC" on sync: multi page

Dec 20 16:14:14 192.168.56.101  U15:14:13.394|03857b50 bio_add_page <3>[0xFFFFFA8003857B50] DRBD_PANIC: bio->bi_vcn=2. multi page occured!
Dec 20 16:14:14 192.168.56.101  U15:14:13.394|03857b50 bio_add_page <2>[0xFFFFFA8003857B50] warning: failure

---------------------------------------------------------------------

REJECTED: DrbdIoCompletion: DeviceObject is NULL.
	It doesn't hurt at the moment, but eventually we want to
	fix this.

-------------------------------------------------------------------------

SOLVED: make install on userland tools (drbd-utils): 2 minor issues:
	Under cygwin it tries to install to //usr/local/sbin while
	this should be /usr/local/sbin (cygwin doesn't handle double
	slashes correctly, this is normally done by the Linux kernel).

	Workaround (for now) is to use 
		make install DESTDIR=""

	It also fails (correcly, I suppose) to set the UNIX permissions
	on the resulting EXE files, this step should be skipped. For
	now this can be ignored since the EXE files are installed correctly.

	Update: chmod works now (must have valid group names, see
	/etc/group

-------------------------------------------------------------------------

SOLVED: Windows does not boot any more once DRBD driver is installed. 

It fails at loading drbd.sys (shown by Windows 7 repair utility).

It also fails if the driver does nothing (return SUCCESS right at the
	beginning)

Update: When not checking for driver signatures (press F8
	and then select disable signature check near the bottom)
	Windows doesn't blue screen, but it hangs on boot.
	No log output is seen.
	If the driver does nothing (and signatures are disabled)
	Windows bluescreens.

It seems that the driver is running but shows no log output over 
syslog (else changing it to doing nothing won't help).

Update: When switching to boot log (Don't start GUI in msconfig.exe
Boot tab) it shows that drbd.sys is loaded (when not checking signatures)
correctly, but then avdevprot.sys (Avira Virus Scanner) blocks the
boot.

Update: Not true. The GUI just does not start after CLASSPNP.sys is
loaded. Revert to original source and see if the problem persists.

Update: Windows boots normally with original driver (and disable
	signature check). Probably logging loop (DbgPrintEx)?

Update: It was the SocketsInit() function hanging forever. Now
	calling SocketsInit() in netlink thread (which works, it
	seems that Windows kernel threads are started only when 
	the GUI is started) and reverted printk_init to keep
	trying to initialize in printk itself.

	Problem solved for now.

-----------------------------------------------------------------------

SOLVED: /dev/sda and /dev/sdb are sometimes swapped.

This is something we probably can't fix, but we need to map the devices
properly to the internal windows kernel device names.

Update: This should be addressed somehow, since drbdmeta expects these
filenames (UNIX-type), while the kernel should receive NT ObjectManager
internal pathes only (\\Device\HarddiskVolume<n>, or \\DosDevices\D: or
so). I still think that it is a bad idea to use /dev/sda3 style in
DRBD config, since they change when the system is rebooted (At least
on Windows 7).

Update: Since /dev/sd[ab] just follow windows NT internal enumeration
(which also swaps) to \Device\Harddisk[01]\Partition<n> this is not a
CygWin problem. What remains constant, however is the enumeration in 
the target objects \Device\HarddiskPartition<n> (only the symbolic
link directory \Device\Harddisk<n> is sometimes swapped).

Update: Patch for drbdmeta is there, need to beautify (separate
	file) and merge into upstream wdrbd branch.

Done.

--------------------------------------------------------------------------

CLOSED: AddDevice is called when any Block Device is created on the system. For
example when a new partition is created (probably also when a USB disk is
attached, didn't test that). It seems to me that it should check if the 
newly created device is a drbd device (/dev/drbdN). 

Update: It seems that AddDevice is not called for new DRBD devices (on
	drbdadm up), so we can close this one.

--------------------------------------------------------------------------

SOLVED: drbdadm up fails if the backing device was newly created with the
	partition manager.

Kernel log says: 

Aug 16 19:32:57 192.168.56.101  U16:25:44.600|0131b660 open_backing_dev <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): open("\Device\HarddiskVolume5") failed with -13

Relevant data from drbd.conf:

device /dev/sda3 

(this partition was just created and drbdadm create-md didn't fail)

Now trying to reboot and see if the problem persists.

Update: after reboot /dev/sda and /dev/sdb are swapped, so we changed 
it to: 

device /dev/sda3 

However, same problem (rebooting didn't fix it)

Aug 17 18:37:21 192.168.56.101  U16:21:17.664|01321040 open_backing_dev <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): open("\Device\HarddiskVolume5") failed with -13

Update: Some printk's showed that pvext list is empty in blkdev_get_by_link.

Update: Research showed that AddDevice (and AddDeviceList) is only called
for devices that are created while the driver is already running (at least
on my Windows box). For example if you create a new partition on a hard 
drive and drbd is loaded, the AddDevice handler is called, but only for
that newly created device. Hence at the point in time the driver is
started, the internal list of devices is empty (existing volumes don't
show up in the list). 

I am not sure if the win4lin internal duplication is really needed. I will
check and remove it (replacing it by something like FindVolumeByName(),
I am sure there is something in the NT kernel). 

Update: There is something: see 
https://stackoverflow.com/questions/45743841/getting-windows-nt-kernel-object-by-name-from-within-a-kernel-driver

What I suggest is to always use kernel internal namespace, also on the
netlink interface. It is then drbdsetup's duty to convert the various
existing namespaces to Windows NT kernel names. For example: 
"D:" -> "\DosDevices\D:"

I am not sure if we should support the UNIX naming convention at all
(/dev/sda1, ...) since it gets shuffled during reboots (/dev/sda sometimes
becomes /dev/sdb). Most safe operation probably is to use the GUID namespace:

\DosDevices\Volume{GUID}

Since the \DosDevices entries are SymLinks (yes NT has symlinks internally!)
we need to resolve them to finally get to the destination object. Then
we need to make sure that it is really a disk partition. 

If we are lucky this works also with network drives. Update: it won't
since SMB is a file based protocol. Same thing as drbd for linux cannot
have NFS backing devices.

Update: Need to reboot Windows after installing the DRBD driver, so
it gets the device list from the PNP manager. This is very common
for Windows drivers (reboot required) so we leave it like this.

However when the backing device is created while windows is running
(like when a partition is created with Partition manager or maybe
USB disk (didn't try that)) reboot is not required.

-------------------------------------------------------------------------

SOLVED: drbdadm down hangs on a partially configured resource

Resource was configured partially (failed because disk didn't exist: kernel
log: 
Aug 17 18:14:47 192.168.56.101  U16:14:37.177|01321b50 get_targetdev_volsize <3>[0xFFFFFA8001321B50] TargetDeviceObject is null!
this behaves as expected).

Further drbdadm up failed with:

$ ./drbd-up.sh
w0: Failure: (162) Invalid configuration request
additional info from kernel:
peer connection already exists
Command '/tmp/drbd/bin/drbdsetup new-peer w0 1 --_name=ubuntu-gnome --use-rle=no --protocol=A' terminated with exit code 10

The down command was never completed:
$ ./drbd-op.sh down
w0: timed out waiting for reply
Command '/tmp/drbd/bin/drbdsetup down w0' terminated with exit code 20

kernel log:

Aug 17 18:15:44 192.168.56.101  U16:15:34.140|01321b50 NetlinkWorkThread <6>[0xFFFFFA8001321B50] done
Aug 17 18:16:37 192.168.56.101  U16:16:27.275|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_GET_RESOURCES:30)
Aug 17 18:16:37 192.168.56.101  U16:16:27.275|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_GET_DEVICES:31)
Aug 17 18:16:37 192.168.56.101  U16:16:27.291|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_DOWN:27)
Aug 17 18:16:37 192.168.56.101  U16:16:27.291|038c91c0 win_drbd_thread_setup <6>[0xFFFFFA80038C91C0] stopped.

Update: drbdadm down also hangs on a completely configured resource.

We should solve this next, so we need less reboots.

Reason is that complete is not called (in fact drbd_thread_setup isn't
used at all). We now call drbd_thread_setup in win_drbd_thread_setup 
as the function. Now it blue screens but one step further.

Update: Calling drbd_thread_setup within win_drbd_thread_setup fixed
this problem.

-------------------------------------------------------------------------

SOLVED: Driver blue screens on drbdadm detach

Solved. There were some little issues, see git log.

-------------------------------------------------------------------------
SOLVED: DrbdIoCompletion: MDLs are never freed because device object is
always NULL.
	Freeing MDLs always. Now blue screen on drbdadm detach/down
	has gone.

----------------------------------------------------------------------

SOLVED: Irps are currently not freed (and so the associated buffers I suppose)
The reason is that Irps are allocated in non paged memory (which make
sense since the pager would maybe need them for I/O also), but for
DRBD Irps and buffers we might want to use Paged memory, so we
can use the completion routine to free them.

If we patch kzmalloc (this also has to be fixed one day ...) to use
Paged memory, the OS blue screens right after finishing booting so
this is not an option.

Maybe have a cleanup_irps thread that does the IRP freeing when
IRQL is not blocking interrupts. Or alternatively allocate buffers
from paged memory, which would prevent us to DRBD the partition
where the swap file is on (which isn't a good idea anyway).

Update: We are now working on getting IoAllocateIrp() to work. It
seems that IoBuildAsynchronousFds() is setting some non-documented
fields which we now have to set manually.

Update: IoAllocateIrp() didn't work (for other reasons). We now
return STATUS_MORE_PROCESSING_REQUIRED as outlined in
https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/constraints-on-completion-routines :
After calling IoFreeIrp, the completion routine must return STATUS_MORE_PROCESSING_REQUIRED to indicate that no further completion processing is needed.

drbdadm up works now (Doing I/O with IoFreeIrp()), drbdadm down / detach
blue screens, but somewhere else.

------------------------------------------------------------------------

SOLVED: Driver blue screens when backing device contains no meta data (and
	meta data is internal)

Last output was:

Aug 28 15:07:59 192.168.56.101  U21:39:03.969|0131c040 drbd_md_sync_page_io <7>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): meta_data io: drbdcmd [20037696]:drbd_md_sync_page_io(,20472s,READ) FFFFF8800181DF9DS
Aug 28 15:07:59 192.168.56.101  U21:39:04.000|0131c040 drbd_md_read <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): Meta data magic not found. Did you "drbdadm create-md"?

Update: It might be fixed meanwhile, see the bluescreen on detach
entry.

Update: Yes now it works.
-------------------------------------------------------------------------

SOLVED: Bluescreen if drbd_open fails

If drbd_open fails in mvolCreate() the whole thing blue screens. Even
when not calling drbd_open and just return an error it blue screens.

The reason was that the return code of mvolCreate() must match
the status field in the Irp (set before the return)

--------------------------------------------------------------------
SOLVED: I am not sure how drbdmeta should work on wdrbd while a drbd device 
is attached, since there is no way (?) to access the lower level
device directly (and access the meta data).

Maybe we should create a lower device (which bypasses DRBD even
when the resource is up) just for the use of drbdmeta.

Update: Yes we need that, but low priority. Create a 
\Device\HarddiskXParitionY-skip-drbd device along with the
\DosDevices\C:-skip-drbd Symlinks (also for Volume{GID}-skip-drbd)
and try them first in drbdmeta. Or check if DRBD is up first.

Update: Mantech wdrbd allows writes past the size of the DRBD device
via the DRBD-ed device itself. This is not a good idea since a

cp /dev/zero /dev/sda5

(/dev/sda5 being the DRBD-ed device) will erase meta data while
it shouldn't.

Update: we now have the same device model as under Linux 
(\\Devices\\DrbdX are real windows devices, not stacked upon
another block device), so drbdmeta can safely access the
underlying block device. Solved.

--------------------------------------------------------------------

SOLVED: Bluescreen on getting length info via IRP request when there
is a NTFS file system on the backing device.

To reproduce, format a DRBD device with NTFS, reboot and make
a drbdadm up. It crashes in IoCallDriver of mvolGetVolumeSize()

Fixed. At least hacked. Problem were automatic variables passed
to IoCallDriver which could not be accessed later. TODO would
be to free them after use.

--------------------------------------------------------------------

SOLVED: I/O fails with Invalid request Code

Reason is that in the I/O handler, drbd_device is NULL (is looked
up over the struct block_device).

It seems that DRBD and win_drbd maintain different copies of
the struct gendisk (and struct block_device) states. The problem
is that given a volume extension we cannot access the drbd
block device because the pointer(s) are NULL in the wdrbd version
of the data. Furthermore we have two fields referring to the
drbd device (namely struct drbd_device *drbd_device and 
void *private_data) what I would do is drop drbd_device since
Linux does not have this field.

Update: This appears to be a little bit more complex than it
seemed originally. Since Windows does not have minor numbers
we need another way for drbd_create_device to find the
matching block device in drbd_create_device() (drbd_main.c).
Since we can lookup windows volume extension by (NT-internal)
name (and the functionality to look it up is already there) the
most natural thing for me would be to use NT-internal names
(such as \\.\F: or \\Devices\HarddiskVolume5) instead of
minor numbers, since this is the way how Windows addresses
block devices. So from a user's point of view we would replace
the device minor <n> entry in drbd.conf by device volume "<driveletter>:"
(or similar for GUIDs and internal names) just as we did in
specifying the disk name (see older solved ticket /dev/sda and
/dev/sdb are sometimes swapped). Usually this would be the same
as the disk (we should provide a default using the disk name
if the device volume is not specified). This allows us also
to (later) create new NT Volumes which are DRBD devices without
local backing device (which is a feature that DRBD for Linux has
TODO: true?). So internally we would lookup the device by
internal NT kernel name and if not found we would (later) create
it and tell the PnP manager that there is a new block device.
If one specifies an existing volume as device volume which differs
from the backing device, one can easily shoot himself into the
foot if the existing device is in use (but there are NT locking
mechanisms which we can use to fail if the device is in use).

Only remaining issue is the question if DRBD can cope with the
struct block_device for the DRBD device is the same (same pointer)
as the backing device (but I think yes, since DRBD uses struct
block_device's internals not very often).

Mantech's solution is to keep the original minor DRBD API and
interpret the minor as (n-1)th letter in alphabet (actually
it starts at letter C .. so if you want to have A: you need
to specify -2 ;) ). I personally think that we do not need
another mapping from something to volumes we should stick to
the way NT is doing this .. that way we are not restricted
to disks that do have a drive letter (it is very easy to
have more than 24 drives in your system). Plus users need
to understand that the minor they specify must match the
backing device (else bad things may happen) and this is not
very user friendly.

Update: We've changed the architectur much like we just 
descriped.
------------------------------------------------------------------------
SOLVED: All drbd devices are called drbd (without a number). The sprintf
is wrong.

This should be easy to fix. Update: but where are they in the WinObj
object hierachy?

Update: They are the devices themselves (all of them) so even I/O
from/to the System partition (C:) goes through the WDRBD driver.

Update: This isn't used any more (dead code)

------------------------------------------------------------------------
SOLVED: blue screen on drbdadm down when cmd's pwd is the drbd device (H:)

	Also when it is not. Must be something new, this already used to
	work..
	Update: when accessing it via h: once it crashes when it 
	is untouched (no I/O ever on DRBD device) it does not crash (?).

	Update: Windows does an I/O after down:

Dec 20 17:17:53 192.168.56.101  U16:20:19.921|0388f4a0 win_drbd_thread_setup <6>[0xFFFFFA800388F4A0] stopped.
Dec 20 17:17:55 192.168.56.101  U16:20:22.000|0131b040 windrbd_io 1

	Update: Fixed. Setting DeviceExtension to NULL and checking
	for that condition. But now, Windows hangs on shut down.

------------------------------------------------------------------------
SOLVED: blkdev_put isn't called on drbdadm down

So the block devices are never freed. Since we keep a record
internally on the block devices this might be a problem 
one day.

This is most likely a DRBD 9 bug and should be fixed there.

Update: This is probably now fixed, since call_rcu now does
something. Check if it is called now.

---------------------------------------------------------------------
