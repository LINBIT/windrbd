From e48fa47b3827dc0b513703b20426478664f52d39 Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Tue, 11 Sep 2018 14:51:22 +0200
Subject: [PATCH 1/2] Removed ManTech's create thread code (reverted to
 original code)

Appears to work without the complicated event syncing stuff. We
now convert the win4lin API to much as closely as possible the
Linux API (that parts of Linux we need for DRBD).
---
 drbd/drbd_main.c | 33 +++++++++++++--------------------
 1 file changed, 13 insertions(+), 20 deletions(-)

diff --git a/drbd/drbd_main.c b/drbd/drbd_main.c
index 13248d6..a2ce65a 100644
--- a/drbd/drbd_main.c
+++ b/drbd/drbd_main.c
@@ -552,6 +552,7 @@ restart:
 	else
 		drbd_info(resource, "Terminating %s thread\n", thi->name);
 
+		/* TODO: this is racy. */
 	complete(&thi->stop);
 	spin_unlock_irqrestore(&thi->t_lock, flags);
 
@@ -602,30 +603,22 @@ int drbd_thread_start(struct drbd_thread *thi)
 		spin_unlock_irqrestore(&thi->t_lock, flags);
 		flush_signals(current); /* otherw. may get -ERESTARTNOINTR */
 
-	thi->nt = NULL;
-        {
-            HANDLE		hThread = NULL;
-            NTSTATUS	Status = STATUS_UNSUCCESSFUL;
-
-            KeInitializeEvent(&thi->start_event, SynchronizationEvent, FALSE);
-            KeInitializeEvent(&thi->wait_event, SynchronizationEvent, FALSE);
-            Status = PsCreateSystemThread(&hThread, THREAD_ALL_ACCESS, NULL, NULL, NULL, windrbd_thread_setup, (void *) thi);
-            if (!NT_SUCCESS(Status)) {
-                return false;
-            }
-            ZwClose(hThread);
-        }
+		nt = kthread_create(drbd_thread_setup, (void *) thi,
+				    "drbd_%c_%s", thi->name[0], resource->name);
 
-        KeWaitForSingleObject(&thi->start_event, Executive, KernelMode, FALSE, NULL);
-        if (!thi->nt)
-        {
-            return false;
-        }
+		if (IS_ERR(nt)) {
+			if (connection)
+				drbd_err(connection, "Couldn't start thread\n");
+			else
+				drbd_err(resource, "Couldn't start thread\n");
+
+			return false;
+		}
 		spin_lock_irqsave(&thi->t_lock, flags);
-	thi->task = thi->nt;
+		thi->task = nt;
 		thi->t_state = RUNNING;
 		spin_unlock_irqrestore(&thi->t_lock, flags);
-	wake_up_process(thi);
+		wake_up_process(nt);
 		break;
 	case EXITING:
 		thi->t_state = RESTARTING;
-- 
2.17.0

