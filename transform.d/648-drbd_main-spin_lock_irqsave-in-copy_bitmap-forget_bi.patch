From 0f2a9c8771fd57bf0edf2ad9cfd84459876a8158 Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Tue, 28 Apr 2020 13:14:48 +0200
Subject: [PATCH 2/6] drbd_main: spin_lock_irqsave in copy_bitmap/forget_bitmap

---
 drbd/drbd_main.c | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/drbd/drbd_main.c b/drbd/drbd_main.c
index d41257d..b848c44 100644
--- a/drbd/drbd_main.c
+++ b/drbd/drbd_main.c
@@ -5145,7 +5145,7 @@ static const char* name_of_node_id(struct drbd_resource *resource, int node_id)
 	return connection ? rcu_dereference(connection->transport.net_conf)->name : "";
 }
 
-static void forget_bitmap(struct drbd_device *device, int node_id) 
+static void forget_bitmap(struct drbd_device *device, int node_id, KIRQL *spin_lock_flags_p)
 {
 	KIRQL rcu_flags;
 	int bitmap_index = device->ldev->md.peers[node_id].bitmap_index;
@@ -5154,7 +5154,7 @@ static void forget_bitmap(struct drbd_device *device, int node_id)
 	if (_drbd_bm_total_weight(device, bitmap_index) == 0)
 		return;
 
-	spin_unlock_irq(&device->ldev->md.uuid_lock);
+	spin_unlock_irqrestore(&device->ldev->md.uuid_lock, *spin_lock_flags_p);
 	rcu_flags = rcu_read_lock();
 	name = name_of_node_id(device->resource, node_id);
 	drbd_info(device, "clearing bitmap UUID and content (%lu bits) for node %d (%s)(slot %d)\n",
@@ -5166,17 +5166,17 @@ static void forget_bitmap(struct drbd_device *device, int node_id)
 	drbd_bm_unlock(device);
 	drbd_resume_io(device);
 	drbd_md_mark_dirty(device);
-	spin_lock_irq(&device->ldev->md.uuid_lock);
+	spin_lock_irqsave(&device->ldev->md.uuid_lock, *spin_lock_flags_p);
 }
 
-static void copy_bitmap(struct drbd_device *device, int from_id, int to_id) 
+static void copy_bitmap(struct drbd_device *device, int from_id, int to_id, KIRQL *spin_lock_irq_flags_p)
 {
 	KIRQL rcu_flags;
 	int from_index = device->ldev->md.peers[from_id].bitmap_index;
 	int to_index = device->ldev->md.peers[to_id].bitmap_index;
 	const char *from_name, *to_name;
 
-	spin_unlock_irq(&device->ldev->md.uuid_lock);
+	spin_unlock_irqrestore(&device->ldev->md.uuid_lock, *spin_lock_irq_flags_p);
 	rcu_flags = rcu_read_lock();
 	from_name = name_of_node_id(device->resource, from_id);
 	to_name = name_of_node_id(device->resource, to_id);
@@ -5189,7 +5189,7 @@ static void copy_bitmap(struct drbd_device *device, int from_id, int to_id)
 	drbd_bm_unlock(device);
 	drbd_resume_io(device);
 	drbd_md_mark_dirty(device);
-	spin_lock_irq(&device->ldev->md.uuid_lock);
+	spin_lock_irqsave(&device->ldev->md.uuid_lock, *spin_lock_irq_flags_p);
 }
 
 static int find_node_id_by_bitmap_uuid(struct drbd_device *device, u64 bm_uuid) 
@@ -5228,7 +5228,7 @@ static bool node_connected(struct drbd_resource *resource, int node_id)
 	return r;
 }
 
-static bool detect_copy_ops_on_peer(struct drbd_peer_device *peer_device) 
+static bool detect_copy_ops_on_peer(struct drbd_peer_device *peer_device, KIRQL *spin_lock_irq_flags_p)
 {
 	struct drbd_device *device = peer_device->device;
 	struct drbd_peer_md *peer_md = device->ldev->md.peers;
@@ -5284,7 +5284,7 @@ found:
 	    peer_md[node_id1].bitmap_uuid != peer_bm_uuid) {
 		peer_md[node_id1].bitmap_uuid = peer_bm_uuid;
 		peer_md[node_id1].bitmap_dagtag = peer_md[from_id].bitmap_dagtag;
-		copy_bitmap(device, from_id, node_id1);
+		copy_bitmap(device, from_id, node_id1, spin_lock_irq_flags_p);
 		modified = true;
 
 	}
@@ -5292,14 +5292,14 @@ found:
 	    peer_md[node_id2].bitmap_uuid != peer_bm_uuid) {
 		peer_md[node_id2].bitmap_uuid = peer_bm_uuid;
 		peer_md[node_id2].bitmap_dagtag = peer_md[from_id].bitmap_dagtag;
-		copy_bitmap(device, from_id, node_id2);
+		copy_bitmap(device, from_id, node_id2, spin_lock_irq_flags_p);
 		modified = true;
 	}
 
 	return modified;
 }
 
-void drbd_uuid_detect_finished_resyncs(struct drbd_peer_device *peer_device) 
+void drbd_uuid_detect_finished_resyncs(struct drbd_peer_device *peer_device)
 {
 	KIRQL spin_lock_irq_flags;
 	struct drbd_device *device = peer_device->device;
@@ -5326,7 +5326,7 @@ void drbd_uuid_detect_finished_resyncs(struct drbd_peer_device *peer_device)
 				if (node_id == peer_device->node_id)
 					drbd_print_uuids(peer_device, "updated UUIDs");
 				else if (peer_md[node_id].flags & MDF_HAVE_BITMAP)
-					forget_bitmap(device, node_id);
+					forget_bitmap(device, node_id, &spin_lock_irq_flags);
 				else
 					drbd_info(device, "Clearing bitmap UUID for node %d\n",
 						  node_id);
@@ -5343,7 +5343,7 @@ void drbd_uuid_detect_finished_resyncs(struct drbd_peer_device *peer_device)
 				peer_md[node_id].bitmap_dagtag = peer_md[from_node_id].bitmap_dagtag;
 				if (peer_md[node_id].flags & MDF_HAVE_BITMAP &&
 				    peer_md[from_node_id].flags & MDF_HAVE_BITMAP)
-					copy_bitmap(device, from_node_id, node_id);
+					copy_bitmap(device, from_node_id, node_id, &spin_lock_irq_flags);
 				else
 					drbd_info(device, "Node %d synced up to node %d.\n",
 						  node_id, from_node_id);
@@ -5353,7 +5353,7 @@ void drbd_uuid_detect_finished_resyncs(struct drbd_peer_device *peer_device)
 		}
 	}
 
-	write_bm |= detect_copy_ops_on_peer(peer_device);
+	write_bm |= detect_copy_ops_on_peer(peer_device, &spin_lock_irq_flags);
 	spin_unlock_irqrestore(&device->ldev->md.uuid_lock,
 			       spin_lock_irq_flags);
 
-- 
2.17.0

