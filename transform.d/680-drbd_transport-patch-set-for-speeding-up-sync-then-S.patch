From 8ac47ec56fc27817b2dec75d0ff0c742613b79cb Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Fri, 4 Dec 2020 17:11:22 +0100
Subject: [PATCH 1/4] drbd_transport: patch set for speeding up sync then
 SyncTarget.

We use 'big pages': since pages are regular memory allocated by
kmalloc() we can have pages of any size. With this patch we do not
split resync requests > 4K into 4K blocks (which would be submitted
one per one to the backing device, which makes it slow). Instead
we handle the resync request with one big pages (and also submit
that one big page to the backing device).
---
 drbd/drbd-headers/drbd_transport.h | 15 ++++-----------
 1 file changed, 4 insertions(+), 11 deletions(-)

diff --git a/drbd/drbd-headers/drbd_transport.h b/drbd/drbd-headers/drbd_transport.h
index 31f32b3..caca311 100644
--- a/drbd/drbd-headers/drbd_transport.h
+++ b/drbd/drbd-headers/drbd_transport.h
@@ -240,13 +240,14 @@ extern bool drbd_should_abort_listening(struct drbd_transport *transport);
 extern void drbd_path_event(struct drbd_transport *transport, struct drbd_path *path);
 
 /* drbd_receiver.c*/
-extern struct page *drbd_alloc_pages(struct drbd_transport *, unsigned int, gfp_t);
+extern struct page *drbd_alloc_pages(struct drbd_transport *, unsigned int, gfp_t, int use_big_pages);
 extern void drbd_free_pages(struct drbd_transport *transport, struct page *page, int is_net);
 
 static inline void drbd_alloc_page_chain(struct drbd_transport *t,
-	struct drbd_page_chain_head *chain, unsigned int nr, gfp_t gfp_flags)
+	struct drbd_page_chain_head *chain, unsigned int nr, gfp_t gfp_flags,
+        int use_big_pages)
 {
-	chain->head = drbd_alloc_pages(t, nr, gfp_flags);
+	chain->head = drbd_alloc_pages(t, nr, gfp_flags, use_big_pages);
 	chain->nr_pages = chain->head ? nr : 0;
 }
 
@@ -291,16 +292,8 @@ static inline void drbd_free_page_chain(struct drbd_transport *transport, struct
 /* grafted over struct page.lru */
 struct drbd_page_chain {
 	struct page *next;	/* next page in chain, if any */
-#ifdef CONFIG_64BIT
 	unsigned int offset;	/* start offset of data within this page */
 	unsigned int size;	/* number of data bytes within this page */
-#else
-#if PAGE_SIZE > (1U<<16)
-#error "won't work."
-#endif
-	unsigned short offset;	/* start offset of data within this page */
-	unsigned short size;	/* number of data bytes within this page */
-#endif
 };
 
 static inline void dummy_for_buildbug(void)
-- 
2.17.0

