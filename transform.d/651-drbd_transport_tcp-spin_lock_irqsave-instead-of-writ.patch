From 3d254c83b6496c61325e99b77a680e3260437058 Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Tue, 28 Apr 2020 16:29:34 +0200
Subject: [PATCH 5/6] drbd_transport_tcp: spin_lock_irqsave (instead of
 write_lock_bh())

---
 drbd/drbd_transport_tcp.c | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/drbd/drbd_transport_tcp.c b/drbd/drbd_transport_tcp.c
index 501a83c..c5ac154 100644
--- a/drbd/drbd_transport_tcp.c
+++ b/drbd/drbd_transport_tcp.c
@@ -599,10 +599,12 @@ static struct dtt_path *dtt_wait_connect_cond(struct drbd_transport *transport)
 
 static void unregister_state_change(struct sock *sock, struct dtt_listener *listener)
 {
-	write_lock_bh(&sock->sk_callback_lock);
+	KIRQL flags;
+
+	spin_lock_irqsave(&sock->sk_callback_lock, flags);
 	sock->sk_state_change = listener->original_sk_state_change;
 	sock->sk_user_data = NULL;
-	write_unlock_bh(&sock->sk_callback_lock);
+	spin_unlock_irqrestore(&sock->sk_callback_lock, flags);
 }
 
 static int dtt_wait_for_connect(struct drbd_transport *transport,
@@ -610,6 +612,7 @@ static int dtt_wait_for_connect(struct drbd_transport *transport,
 				struct dtt_path **ret_path)
 {
 	KIRQL rcu_flags;
+	KIRQL spin_lock_bh_flags;
 	struct dtt_socket_container *socket_c;
 	struct sockaddr_storage peer_addr;
 	int connect_int, err = 0;
@@ -642,7 +645,7 @@ retry:
 	if (timeo_ret <= 0)
 		return -EAGAIN;
 
-	spin_lock_bh(&listener->listener.waiters_lock);
+	spin_lock_irqsave(&listener->listener.waiters_lock, spin_lock_bh_flags);
 	socket_c = list_first_entry_or_null(&path->sockets, struct dtt_socket_container, list);
 	if (socket_c) {
 		s_estab = socket_c->socket;
@@ -650,7 +653,7 @@ retry:
 		kfree(socket_c);
 	} else if (listener->listener.pending_accepts > 0) {
 		listener->listener.pending_accepts--;
-		spin_unlock_bh(&listener->listener.waiters_lock);
+		spin_unlock_irqrestore(&listener->listener.waiters_lock, spin_lock_bh_flags);
 
 		s_estab = NULL;
 		err = kernel_accept(listener->s_listen, &s_estab, O_NONBLOCK);
@@ -663,7 +666,7 @@ retry:
 
 		s_estab->ops->getname(s_estab, (struct sockaddr *)&peer_addr, 2);
 
-		spin_lock_bh(&listener->listener.waiters_lock);
+		spin_lock_irqsave(&listener->listener.waiters_lock, spin_lock_bh_flags);
 		drbd_path2 = drbd_find_path_by_addr(&listener->listener, &peer_addr);
 		if (!drbd_path2) {
 			struct sockaddr_in6 *from_sin6;
@@ -704,13 +707,13 @@ retry:
 		if (s_estab->sk->sk_state != TCP_ESTABLISHED)
 			goto retry_locked;
 	}
-	spin_unlock_bh(&listener->listener.waiters_lock);
+	spin_unlock_irqrestore(&listener->listener.waiters_lock, spin_lock_bh_flags);
 	*socket = s_estab;
 	*ret_path = path;
 	return 0;
 
 retry_locked:
-	spin_unlock_bh(&listener->listener.waiters_lock);
+	spin_unlock_irqrestore(&listener->listener.waiters_lock, spin_lock_bh_flags);
 	if (s_estab) {
 		kernel_sock_shutdown(s_estab, SHUT_RDWR);
 		sock_release(s_estab);
@@ -781,6 +784,7 @@ static int dtt_init_listener(struct drbd_transport *transport,
 			     struct drbd_listener *drbd_listener)
 {
 	KIRQL rcu_flags;
+	KIRQL write_lock_bh_flags;
 	int err, sndbuf_size, rcvbuf_size, addr_len;
 	struct sockaddr_storage my_addr;
 	struct dtt_listener *listener = container_of(drbd_listener, struct dtt_listener, listener);
@@ -826,11 +830,11 @@ static int dtt_init_listener(struct drbd_transport *transport,
 	}
 
 	listener->s_listen = s_listen;
-	write_lock_bh(&s_listen->sk->sk_callback_lock);
+	spin_lock_irqsave(&s_listen->sk->sk_callback_lock, write_lock_bh_flags);
 	listener->original_sk_state_change = s_listen->sk->sk_state_change;
 	s_listen->sk->sk_state_change = dtt_incoming_connection;
 	s_listen->sk->sk_user_data = listener;
-	write_unlock_bh(&s_listen->sk->sk_callback_lock);
+	spin_unlock_irqrestore(&s_listen->sk->sk_callback_lock, write_lock_bh_flags);
 
 	err = s_listen->ops->listen(s_listen, DRBD_PEERS_MAX * 2);
 	if (err < 0) {
-- 
2.17.0

