diff --git i/drbd/drbd_nl.c w/drbd/drbd_nl.c
index 6aa1ee49..f241e94f 100644
--- i/drbd/drbd_nl.c
+++ w/drbd/drbd_nl.c
@@ -86,8 +86,26 @@
 int drbd_adm_get_initial_state_done(struct netlink_callback *cb);
 
+inline static int genl_register_family_with_ops(const struct genl_family *f, const struct genl_ops *o, int count)
+{
+	(void)f;
+	(void)o;
+	(void)count;
+	return 0;
+}
+
+inline static int genl_unregister_family(const struct genl_family *f)
+{
+	(void)f;
+	return 0;
+}
+
+static void drbd_adm_send_reply(struct sk_buff *skb, struct genl_info *info);
+
 #include <linux/drbd_genl_api.h>
 #include "drbd_nla.h"
 #include <linux/genl_magic_func.h>
 
+#include "netlink.c_inc"
+
 atomic_t drbd_genl_seq = ATOMIC_INIT(2); /* two. */

@@ -566,7 +584,7 @@ int drbd_khelper(struct drbd_device *device, struct drbd_connection *connection,
 	int ret;
 
     enlarge_buffer:
-	env.buffer = (char *)__get_free_pages(GFP_NOIO, get_order(env.size));
+	env.buffer = (char *)kzalloc(env.size, GFP_NOIO);
 	if (!env.buffer) {
 		ret = -ENOMEM;
 		goto out_err;
@@ -641,7 +659,7 @@ int drbd_khelper(struct drbd_device *device, struct drbd_connection *connection,
 	envp = make_envp(&env);
 	if (!envp) {
 		if (env.pos == -ENOMEM) {
-			free_pages((unsigned long)env.buffer, get_order(env.size));
+			kfree(env.buffer);
 			env.size += PAGE_SIZE;
 			goto enlarge_buffer;
 		}
@@ -677,7 +695,7 @@ int drbd_khelper(struct drbd_device *device, struct drbd_connection *connection,
 	if (ret < 0) /* Ignore any ERRNOs we got. */
 		ret = 0;
 
-	free_pages((unsigned long)env.buffer, get_order(env.size));
+	kfree(env.buffer);
 	return ret;
 
     out_err:
@@ -1790,7 +1825,6 @@ static void fixup_discard_if_not_supported(struct request_queue *q)
 	 * Older kernels got this wrong in "stack limits".
 	 * */
 	if (!blk_queue_discard(q)) {
-		blk_queue_max_discard_sectors(q, 0);
 		blk_queue_discard_granularity(q, 0);
 	}
 }
@@ -3288,7 +3319,8 @@ static int adm_new_connection(struct drbd_connection **ret_conn,
 
 	*ret_conn = NULL;
 	if (adm_ctx->connection) {
-		drbd_err(adm_ctx->resource, "Connection for peer node id %d already exists\n",
+	    struct drbd_resource *resource = adm_ctx->resource;
+		drbd_err(resource, "Connection for peer node id %d already exists\n",
 			 adm_ctx->peer_node_id);
 		return ERR_INVALID_REQUEST;
 	}
@@ -3536,7 +3568,8 @@ adm_add_path(struct drbd_config_context *adm_ctx,  struct genl_info *info)
 	err = transport->ops->add_path(transport, path);
 	if (err) {
 		kref_put(&path->kref, drbd_destroy_path);
-		drbd_err(adm_ctx->connection, "add_path() failed with %d\n", err);
+		struct drbd_connection *connection = adm_ctx->connection;
+		drbd_err(connection, "add_path() failed with %d\n", err);
 		drbd_msg_put_info(adm_ctx->reply_skb, "add_path on transport failed");
 		return ERR_INVALID_REQUEST;
 	}
@@ -4606,10 +4639,7 @@ static void device_to_statistics(struct device_statistics *s,
 
 		s->dev_disk_flags = md->flags;
 		q = bdev_get_queue(device->ldev->backing_bdev);
-		s->dev_lower_blocked =
-			bdi_congested(q->backing_dev_info,
-				      (1 << WB_async_congested) |
-				      (1 << WB_sync_congested));
+		s->dev_lower_blocked = 0;
 		put_ldev(device);
 	}
 	s->dev_size = drbd_get_capacity(device->this_bdev);
