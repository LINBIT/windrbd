diff --git i/drbd/drbd_receiver.c w/drbd/drbd_receiver.c
index 13ec23c3..daa95b20 100644
--- i/drbd/drbd_receiver.c
+++ w/drbd/drbd_receiver.c
@@ -47,6 +47,8 @@
 #include "drbd_req.h"
 #include "drbd_vli.h"
 #include <linux/scatterlist.h>
+#include <linux/jiffies.h>
+#include <linux/sched.h>
 
 #define PRO_FEATURES (DRBD_FF_TRIM|DRBD_FF_THIN_RESYNC|DRBD_FF_WSAME)
 
@@ -78,6 +80,18 @@ static int process_twopc(struct drbd_connection *, struct twopc_reply *, struct
 static void drbd_resync(struct drbd_peer_device *, enum resync_reason) __must_hold(local);
 static void drbd_unplug_all_devices(struct drbd_connection *connection);
 
+
+/* To be implemented. See also
+ *   https://msdn.microsoft.com/de-de/library/ff552562(v=vs.85).aspx
+ *   https://msdn.microsoft.com/de-de/library/hh439649(v=vs.85).aspx
+*/
+int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
+	sector_t nr_sects, gfp_t gfp_mask, unsigned long flags)
+{
+	return -EIO;
+}
+
+
 static struct drbd_epoch *previous_epoch(struct drbd_connection *connection, struct drbd_epoch *epoch)
 {
 	struct drbd_epoch *prev;
@@ -101,7 +115,7 @@ static struct drbd_epoch *previous_epoch(struct drbd_connection *connection, str
 static struct page *page_chain_del(struct page **head, int n)
 {
 	struct page *page;
-	struct page *tmp;
+	struct page *tmp = NULL;
 
 	BUG_ON(!n);
 	BUG_ON(!head);
@@ -830,7 +844,7 @@ int decode_header(struct drbd_connection *connection, void *header, struct packe
 			 connection->agreed_pro_version);
 		return -EINVAL;
 	}
-	pi->data = header + header_size;
+	pi->data = ((u8*)header) + header_size;
 	return 0;
 }
 
@@ -1800,7 +1812,7 @@ read_in_block(struct drbd_peer_device *peer_device, struct drbd_peer_request_det
 		drbd_err(device, "Fault injection: Corrupting data on receive, sector %llu\n",
 				d->sector);
 		page = peer_req->page_chain.head;
-		data = kmap(page) + page_chain_offset(page);
+		data = (unsigned long*)(((u8*)kmap(page)) + page_chain_offset(page));
 		data[0] = ~data[0];
 		kunmap(page);
 	}
@@ -2062,7 +2062,7 @@ static int recv_dless_read(struct drbd_peer_device *peer_device, struct drbd_req
 	D_ASSERT(peer_device->device, sector == bio->bi_iter.bi_sector);
 
 	bio_for_each_segment(bvec, bio, iter) {
-		void *mapped = kmap(bvec.bv_page) + bvec.bv_offset;
+		void *mapped = ((u8*)kmap(bvec.bv_page)) + bvec.bv_offset;
 		expect = min_t(int, data_size, bvec.bv_len);
 		err = drbd_recv_into(peer_device->connection, mapped, expect);
 		kunmap(bvec.bv_page);
@@ -5172,8 +5184,9 @@ static int receive_req_state(struct drbd_connection *connection, struct packet_i
 	if (pi->cmd == P_STATE_CHG_REQ) {
 		peer_device = conn_peer_device(connection, pi->vnr);
 		if (!peer_device) {
-			if (mask.i == ((union drbd_state){{.conn = conn_MASK}}).i &&
-			    val.i == ((union drbd_state){{.conn = L_OFF}}).i) {
+			union drbd_state cm = { .conn = conn_MASK };
+			union drbd_state lo = { .conn = L_OFF };
+			if (mask.i == cm.i && val.i == lo.i) {
 				/* The peer removed this volume, we do not have it... */
 				drbd_send_sr_reply(connection, vnr, SS_NOTHING_TO_DO);
 				return 0;
@@ -7902,7 +7915,7 @@ static int got_BlockAck(struct drbd_connection *connection, struct packet_info *
 	struct p_block_ack *p = pi->data;
 	sector_t sector = be64_to_cpu(p->sector);
 	int blksize = be32_to_cpu(p->blksize);
-	enum drbd_req_event what;
+	enum drbd_req_event what = NOTHING;
 
 	peer_device = conn_peer_device(connection, pi->vnr);
 	if (!peer_device)
